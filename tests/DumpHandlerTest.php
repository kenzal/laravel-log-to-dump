<?php

use Illuminate\Foundation\Testing\WithFaker;
use Kenzal\LogToDump\ServiceProvider;
use Orchestra\Testbench\TestCase;
use Symfony\Component\VarDumper\VarDumper;

class DumpHandlerTest extends TestCase
{
    use WithFaker;

    protected ?Closure $oldHandler = null;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->app->register(ServiceProvider::class);
        $this->dumpHandler = new class() {

            protected array $calls = [];

            public function dump(...$args)
            {
                $this->calls[] = $args;
                return null;
            }

            public function getCalls(): array
            {
                return $this->calls;
            }

            public function resetCalls(): array
            {
                $this->calls = [];
                return $this->calls;
            }
        };
        $dummy             = fn() => null;
        $this->oldHandler  = VarDumper::setHandler($dummy);
        $check             = VarDumper::setHandler($this->dumpHandler->dump(...));
        $this->markTestSkippedWhen($check !== $dummy,
                                   'VarDumper handler could not be set correctly. Possible intercepted by a service such as Laravel Herd.');
    }

    public function tearDown(): void
    {
        parent::tearDown();
        VarDumper::setHandler($this->oldHandler);
    }

    public function testDumpHandlerWritesToDump(): void
    {
        $logger = $this->app->make('log')->channel('dump');
        $this->assertEmpty($this->dumpHandler->resetCalls());
        $message = $this->faker()->sentence();
        $logger->debug($message, ['context' => 'test']);
        $calls = $this->dumpHandler->getCalls();
        $this->assertNotEmpty($calls);
        // verify at least one call contains the expected message
        foreach ($calls as $call) {
            if (str_contains($call[0], $message)) {
                $this->assertTrue(true);
                return;
            }
        }
        $this->fail('Expected message not found in dump calls.');
    }

}
